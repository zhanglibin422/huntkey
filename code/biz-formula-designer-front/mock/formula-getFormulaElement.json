{
    "errMsg": null,
    "retCode": 1,
    "data": {
        "tvmSysVariants": [
            {
                "addtime": 1498527694000,
                "modtime": 1499848233000,
                "adduser": "admin",
                "moduser": "admin",
                "isenable": 1,
                "vrntId": "088dcb5654fe4050bc1d771e6889bbe1",
                "vrntVarName": "a",
                "vrntVarDesc": "A simple GET request",
                "formulaId": "3c30efcc97af436e90f93c3c93ba9b1f",
                "vrntVarType": "text",
                "vrntVarScope": "system",
                "vrntFormulaId": "A simple GET request",
                "vrntState": "inusing",
                "vrntModifyRemarks": "A simple GET request",
                "acctid": 1
            }
        ],
        "customizeFuncList": [],
        "tvmLocVariants": [],
        "commonlyFormulasList": [
            {
                "funName": "MONTH",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回某日期的月份。 月份是介于 1 到 12 之间的整数\n~~~~~~~~~~~\nMONTH(date)\n~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 10,
                "behaivorOrder": 0
            },
            {
                "funName": "MONTHADD",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将指定日期加/减指定月数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMONTHADD(date, deltaMonths)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 11,
                "behaivorOrder": 0
            },
            {
                "funName": "TRIM",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "删除字符串首尾的空格，但是会保留字符串内部作为词与词之间分隔的空格\n~~~~~~~~~~\nTRIM(text)\n~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 16,
                "behaivorOrder": 0
            },
            {
                "funName": "SQRT",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回正的平方根\n~~~~~~~~~~~~\nSQRT(number)\n~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 16,
                "behaivorOrder": 0
            },
            {
                "funName": "TEXT",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回文本字符串中的字符个数\n~~~~~~~~~~~~~~~~~~~~~~~\nTEXT(num,text_format)\nTEXT(date, text_format)\n~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 15,
                "behaivorOrder": 0
            },
            {
                "funName": "VALUE",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "将文本转化为数字\n~~~~~~~~~~~\nVALUE(text)\n~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 19,
                "behaivorOrder": 0
            },
            {
                "funName": "MONTHS",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回两个日期之间的月数\n~~~~~~~~~~~~~~~~~~~~~~~~~\nMONTH(endDate, startDate)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 12,
                "behaivorOrder": 0
            },
            {
                "funName": "PRODUCT",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "函数使所有以参数形式给出的数字相乘并返回乘积\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPRODUCT(number1, [number2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 13,
                "behaivorOrder": 0
            },
            {
                "funName": "TIMESTAMP",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将日期对象转换成时间戳\n~~~~~~~~~~~~~~~\nTIMESTAMP(date)\n~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "String",
                "funOrder": 18,
                "behaivorOrder": 0
            },
            {
                "funName": "MINUTE",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回某日期的分钟数\n~~~~~~~~~~~~\nMINUTE(date)\n~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 7,
                "behaivorOrder": 0
            },
            {
                "funName": "REPLACE",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "根据指定的字符数，将部分文本字符串替换为不同的文本字符串\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nREPLACE(oldtext, startnum, numchars, newtext)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 9,
                "behaivorOrder": 0
            },
            {
                "funName": "IF",
                "funClassify": "logic",
                "classifyDesc": "逻辑函数",
                "funDesc": "判断一个条件能否满足；如果满足返回一个值，如果不满足则返回另外一个值\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIF(判断条件，结果为true的返回值, 结果为false的返回值)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 1,
                "funType": "Boolean",
                "funOrder": 2,
                "behaivorOrder": 0
            }
        ],
        "allFuncList": [
            {
                "funName": "ABS",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回数字的绝对值\n~~~~~~~~~~~\nABS(number)\n~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 0,
                "behaivorOrder": 0
            },
            {
                "funName": "AVG",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回平均数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAVERAGE(number1, [number2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 1,
                "behaivorOrder": 0
            },
            {
                "funName": "CEILING",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回将参数 number 向上舍入（沿绝对值增大的方向）为最接近的指定基数的倍数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCEILING(number, significance)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 2,
                "behaivorOrder": 0
            },
            {
                "funName": "COUNT",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "统计参数个数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCOUNT(value1, [value2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Long",
                "funOrder": 3,
                "behaivorOrder": 0
            },
            {
                "funName": "FIXED",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "将数字舍入到指定的小数位数，以十进制数格式对该数进行格式设置，并以文本形式返回结果\n~~~~~~~~~~~~~~~~~~~~~~~~~\nFIXED(number, [decimals])\n~~~~~~~~~~~~~~~~~~~~~~~~~\nnumber: 必需。 要进行舍入并转换为文本的数字\ndecimals: 可选。 小数点右边的位数\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 4,
                "behaivorOrder": 0
            },
            {
                "funName": "FlOOR",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回将参数 number 向上舍入（沿绝对值增大的方向）为最接近的指定基数的倍数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFLOOR(number, significance)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 5,
                "behaivorOrder": 0
            },
            {
                "funName": "INT",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "将数字向下舍入到最接近的整数\n~~~~~~~~~~~\nINT(number)\n~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Long",
                "funOrder": 6,
                "behaivorOrder": 0
            },
            {
                "funName": "LARGE",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回数据集中第k个最大值\n~~~~~~~~~~~~~~\nLARGE(array,k)\n~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 7,
                "behaivorOrder": 0
            },
            {
                "funName": "LOG",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "根据指定底数返回数字的对数\n~~~~~~~~~~~~~~~~~~~\nLOG(number, [base])\n~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 8,
                "behaivorOrder": 0
            },
            {
                "funName": "MAX",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回一组值中的最大值\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMAX(number1, [number2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 9,
                "behaivorOrder": 0
            },
            {
                "funName": "MIN",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回一组值中的最小值\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMIN(number1, [number2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 10,
                "behaivorOrder": 0
            },
            {
                "funName": "MOD",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回两数相除的余数。 结果的符号与除数相同\n~~~~~~~~~~~~~~~~~~~~\nMOD(number, divisor)\n~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 11,
                "behaivorOrder": 0
            },
            {
                "funName": "POWER",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回数字乘幂的结果\n~~~~~~~~~~~~~~~~~~~~\nPOWER(number, power)\n~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 12,
                "behaivorOrder": 0
            },
            {
                "funName": "PRODUCT",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "函数使所有以参数形式给出的数字相乘并返回乘积\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPRODUCT(number1, [number2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 13,
                "behaivorOrder": 0
            },
            {
                "funName": "ROUND",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "将数字四舍五入到指定的位数\n~~~~~~~~~~~~~~~~~~~~~~~~~\nROUND(number, num_digits)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 14,
                "behaivorOrder": 0
            },
            {
                "funName": "SMALL",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回数据集中第k个最大值\n~~~~~~~~~~~~~~\nSMALL(array,k)\n~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 15,
                "behaivorOrder": 0
            },
            {
                "funName": "SQRT",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "返回正的平方根\n~~~~~~~~~~~~\nSQRT(number)\n~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 16,
                "behaivorOrder": 0
            },
            {
                "funName": "SUM",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "函数使所有以参数形式给出的数字相加并返回和\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSUM(number1, [number2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 17,
                "behaivorOrder": 0
            },
            {
                "funName": "SUMPRODUCT",
                "funClassify": "math",
                "classifyDesc": "数学函数",
                "funDesc": "在给定的数组中，将数组间对应的元素相乘，并返回乘积之和\narray: 可选。多个数字数组\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSUMPRODUCT(array1, [array2])\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 0,
                "funType": "Double",
                "funOrder": 18,
                "behaivorOrder": 0
            },
            {
                "funName": "AND",
                "funClassify": "logic",
                "classifyDesc": "逻辑函数",
                "funDesc": "在参数组中，任何一个参数逻辑值为false，即返回false；只有当所有参数逻辑值为true，才返回true\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAND(logical1, [logical2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 1,
                "funType": "Boolean",
                "funOrder": 0,
                "behaivorOrder": 0
            },
            {
                "funName": "FALSE",
                "funClassify": "logic",
                "classifyDesc": "逻辑函数",
                "funDesc": "强制括号中的逻辑值false\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFALSE(logical, [logical2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 1,
                "funType": "Boolean",
                "funOrder": 1,
                "behaivorOrder": 0
            },
            {
                "funName": "IF",
                "funClassify": "logic",
                "classifyDesc": "逻辑函数",
                "funDesc": "判断一个条件能否满足；如果满足返回一个值，如果不满足则返回另外一个值\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIF(判断条件，结果为true的返回值, 结果为false的返回值)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 1,
                "funType": "Boolean",
                "funOrder": 2,
                "behaivorOrder": 0
            },
            {
                "funName": "NOT",
                "funClassify": "logic",
                "classifyDesc": "逻辑函数",
                "funDesc": "对参数逻辑值求反\nNOT比较简单，就是把括号里为true的值变成false，括号里为false的值变为true\n~~~~~~~~~~~~\nNOT(logical)\n~~~~~~~~~~~~\n",
                "funClassifyOrder": 1,
                "funType": "Boolean",
                "funOrder": 3,
                "behaivorOrder": 0
            },
            {
                "funName": "OR",
                "funClassify": "logic",
                "classifyDesc": "逻辑函数",
                "funDesc": "在参数组中，任何一个参数逻辑值为true，即返回true；只有当所有逻辑参数值为false，才返回false\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nOR(logical1,[logical2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 1,
                "funType": "Boolean",
                "funOrder": 4,
                "behaivorOrder": 0
            },
            {
                "funName": "TRUE",
                "funClassify": "logic",
                "classifyDesc": "逻辑函数",
                "funDesc": "强制括号中的逻辑值为true。\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTRUE(logical, [logical2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 1,
                "funType": "Boolean",
                "funOrder": 5,
                "behaivorOrder": 0
            },
            {
                "funName": "XOR",
                "funClassify": "logic",
                "classifyDesc": "逻辑函数",
                "funDesc": "返回所有参数的异或值\n异或的含义是，两个值相同，返回true，两个值不同，返回false\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nXOR(logical1,logical2,[logical3], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 1,
                "funType": "Boolean",
                "funOrder": 6,
                "behaivorOrder": 0
            },
            {
                "funName": "CONCAT",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "将多个文本字符串合并成一个文本字符串。示例：\nCONCAT(A,B,C)，即返回值为ABC\n字段或者函数之间，用逗号隔开。如果是字符串，需要用引号包裹起来\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCONCATENATE(text1,[text2], ...)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 0,
                "behaivorOrder": 0
            },
            {
                "funName": "CONTAINS",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "判断字符串text1是否包含字符串text2，包含返回true，否则返回false\n~~~~~~~~~~~~~~~~~~~~~~\nCONTAINS(text1, text2)\n~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 1,
                "behaivorOrder": 0
            },
            {
                "funName": "EXACT",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "比较两个字符串是否完全相同（区分大小写）。完全相同则返回true，否则返回false\n~~~~~~~~~~~~~~~~~~\nEXACT(text1,text2)\n~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 2,
                "behaivorOrder": 0
            },
            {
                "funName": "ISEMPTY",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "判断值是否为空字符串、空对象或者空数组\n~~~~~~~~~~~~~\nISEMPTY(text)\n~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 3,
                "behaivorOrder": 0
            },
            {
                "funName": "LEFT",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "从一个文本字符串的第一个字符开始返回指定个数的字符\n~~~~~~~~~~~~~~~~~~~~\nLEFT(text,num_chars)\n~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 4,
                "behaivorOrder": 0
            },
            {
                "funName": "LEN",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回文本字符串中的字符个数\n~~~~~~~~~\nLEN(text)\n~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 5,
                "behaivorOrder": 0
            },
            {
                "funName": "LOWER",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回文本字符串中的字符个数\n~~~~~~~~~~~\nLOWER(text)\n~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 6,
                "behaivorOrder": 0
            },
            {
                "funName": "MID",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回文本字符串中的字符个数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMID(text, startnum, numchars)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 7,
                "behaivorOrder": 0
            },
            {
                "funName": "NUMBER",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回数值\n~~~~~~~~~~~~\nNUMBER(text)\n~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 8,
                "behaivorOrder": 0
            },
            {
                "funName": "REPLACE",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "根据指定的字符数，将部分文本字符串替换为不同的文本字符串\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nREPLACE(oldtext, startnum, numchars, newtext)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 9,
                "behaivorOrder": 0
            },
            {
                "funName": "REPT",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "将文本重复一定次数\n~~~~~~~~~~~~~~~~~~~~~~~~\nREPT(text, number_times)\n~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 10,
                "behaivorOrder": 0
            },
            {
                "funName": "RIGHT",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "从一个文本字符串的第一个字符开始返回指定个数的字符\n~~~~~~~~~~~~~~~~~~~~~\nRIGHT(text,num_chars)\n~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 11,
                "behaivorOrder": 0
            },
            {
                "funName": "SEARCH",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "将文本重复一定次数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSEARCH(findtext,withintext,[start_num])\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 12,
                "behaivorOrder": 0
            },
            {
                "funName": "SPLIT",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "将文本按指定字符串分割成数组，并取值\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSPLIT(text, text_separator, index)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 13,
                "behaivorOrder": 0
            },
            {
                "funName": "STRING",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回字符串\n~~~~~~~~~~~~~~\nSTRING(number)\n~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 14,
                "behaivorOrder": 0
            },
            {
                "funName": "TEXT",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回文本字符串中的字符个数\n~~~~~~~~~~~~~~~~~~~~~~~\nTEXT(num,text_format)\nTEXT(date, text_format)\n~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 15,
                "behaivorOrder": 0
            },
            {
                "funName": "TRIM",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "删除字符串首尾的空格，但是会保留字符串内部作为词与词之间分隔的空格\n~~~~~~~~~~\nTRIM(text)\n~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 16,
                "behaivorOrder": 0
            },
            {
                "funName": "UPPER",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回文本字符串中的字符个数\n~~~~~~~~~~~\nUPPER(text)\n~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 17,
                "behaivorOrder": 0
            },
            {
                "funName": "UPPERMONEY",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "返回中文大写金额\n~~~~~~~~~~~~~~~~~~\nUPPERMONEY(number)\n~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 18,
                "behaivorOrder": 0
            },
            {
                "funName": "VALUE",
                "funClassify": "text",
                "classifyDesc": "文本函数",
                "funDesc": "将文本转化为数字\n~~~~~~~~~~~\nVALUE(text)\n~~~~~~~~~~~\n",
                "funClassifyOrder": 2,
                "funType": "String",
                "funOrder": 19,
                "behaivorOrder": 0
            },
            {
                "funName": "DATE",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将时间戳转换为日期对象 \n~~~~~~~~~~~~~~~ \nDATE(timestamp) \n~~~~~~~~~~~~~~~ \ntimestamp: 必需。时间戳。 \n将年月日时分秒转换为日期对象 \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \nDATE(year,month,day) \nDATE(year,month,day,hour,minute,second) \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \nyear: 必需。年份 \nmonth: 必需。月份 \nday: 必需。天数 \nhour: 必须。小时 \nminute: 必需。分钟 \nsecond: 必需。秒 \n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 0,
                "behaivorOrder": 0
            },
            {
                "funName": "DAY",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回某日期的天数。 天数是介于 1 到 31 之间的整数\n~~~~~~~~~\nDAY(date)\n~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 1,
                "behaivorOrder": 0
            },
            {
                "funName": "DAYADD",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将指定日期加/减指定天数\n~~~~~~~~~~~~~~~~~~~~~~~\nDAYADD(date, deltadays)\n~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 2,
                "behaivorOrder": 0
            },
            {
                "funName": "DAYS",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回两个日期之间的天数\n~~~~~~~~~~~~~~~~~~~~~~~~\nDAYS(enddate, startdate)\n~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 3,
                "behaivorOrder": 0
            },
            {
                "funName": "HOUR",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回某日期的小时数\n~~~~~~~~~~\nHOUR(date)\n~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 4,
                "behaivorOrder": 0
            },
            {
                "funName": "HOURADD",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将指定日期加/减指定小时数\n~~~~~~~~~~~~~~~~~~~~~~~~~\nHOURADD(date, deltaHours)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 5,
                "behaivorOrder": 0
            },
            {
                "funName": "HOURS",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回两个日期之间的小时数\n~~~~~~~~~~~~~~~~~~~~~~~~~\nHOURS(enddate, startdate)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 6,
                "behaivorOrder": 0
            },
            {
                "funName": "MINUTE",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回某日期的分钟数\n~~~~~~~~~~~~\nMINUTE(date)\n~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 7,
                "behaivorOrder": 0
            },
            {
                "funName": "MINUTEADD",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将指定日期加/减指定分钟数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMINUTEADD(date, deltaMinutes)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 8,
                "behaivorOrder": 0
            },
            {
                "funName": "MINUTES",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回两个日期之间的分钟数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMINUTES(enddate, startdate)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 9,
                "behaivorOrder": 0
            },
            {
                "funName": "MONTH",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回某日期的月份。 月份是介于 1 到 12 之间的整数\n~~~~~~~~~~~\nMONTH(date)\n~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 10,
                "behaivorOrder": 0
            },
            {
                "funName": "MONTHADD",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将指定日期加/减指定月数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMONTHADD(date, deltaMonths)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 11,
                "behaivorOrder": 0
            },
            {
                "funName": "MONTHS",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回两个日期之间的月数\n~~~~~~~~~~~~~~~~~~~~~~~~~\nMONTH(endDate, startDate)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 12,
                "behaivorOrder": 0
            },
            {
                "funName": "NOW",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回当前时间\n~~~~~\nNOW()\n~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 13,
                "behaivorOrder": 0
            },
            {
                "funName": "SECOND",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回某日期的秒数\n~~~~~~~~~~~~\nSECOND(date)\n~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 14,
                "behaivorOrder": 0
            },
            {
                "funName": "SECONDADD",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将指定日期加/减指定秒数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSECONDADD(date, deltaSeconds)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 15,
                "behaivorOrder": 0
            },
            {
                "funName": "SECONDS",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回两个日期之间的秒数\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSECONDS(enddate, startdate)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 16,
                "behaivorOrder": 0
            },
            {
                "funName": "TIME",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将日期对象转换成时间戳\n~~~~~~~~~~~~~~~~~~~~~~~~~~\nTIME(hour, minute, second)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n返回特定时间的十进制数字。时间值为日期值的一部分，并用十进制数表示（例如 12:00 PM 可表示为 0.5，因为此时是一天的一半）\nhour: 必需。 0（零）到 32767 之间的数字，代表小时。 任何大于 23 的值都会除以 24，余数将作为小时值。 例如，TIME(27,0,0) = TIME(3,0,0) = .125\nminute: 必需。 0 到 32767 之间的数字，代表分钟。 任何大于 59 的值将转换为小时和分钟。 例如，TIME(0,750,0) = TIME(12,30,0) = .520833\nsecond: 必需。 0 到 32767 之间的数字，代表秒。 任何大于 59 的值将转换为小时、分钟和秒。 例如，TIME(0,0,2000) = TIME(0,33,22) = .023148\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 17,
                "behaivorOrder": 0
            },
            {
                "funName": "TIMESTAMP",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将日期对象转换成时间戳\n~~~~~~~~~~~~~~~\nTIMESTAMP(date)\n~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "String",
                "funOrder": 18,
                "behaivorOrder": 0
            },
            {
                "funName": "TODAY",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回今天\n~~~~~~~\nTODAY()\n~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 19,
                "behaivorOrder": 0
            },
            {
                "funName": "WEEK",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回特定日期的周数。例如，包含1月1里的周为该年的第1周，其编号为第1周\n~~~~~~~~~~~~~~~~~~~~~~~\nWEEK(date, return_type)\n~~~~~~~~~~~~~~~~~~~~~~~\ndata: 必需。指定日期。代表一周中的日期。应使用DATE函数输入日期，或者将日期作为其他公式或函数的结果输入\nreturn_type: 可选。一数字，确定星期从周几开始。默认值为1\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 20,
                "behaivorOrder": 0
            },
            {
                "funName": "YEARADD",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "将指定日期加/减指定年数\n~~~~~~~~~~~~~~~~~~~~~~~~~\nYEARADD(date, deltaYears)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Date",
                "funOrder": 21,
                "behaivorOrder": 0
            },
            {
                "funName": "YEAY",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回某日期的年份\n~~~~~~~~~~\nYEAR(date)\n~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 22,
                "behaivorOrder": 0
            },
            {
                "funName": "YEAYS",
                "funClassify": "date",
                "classifyDesc": "日期函数",
                "funDesc": "返回两个日期之间的年数\n~~~~~~~~~~~~~~~~~~~~~~~~\nYEAR(endDate, startDate)\n~~~~~~~~~~~~~~~~~~~~~~~~\n",
                "funClassifyOrder": 3,
                "funType": "Long",
                "funOrder": 23,
                "behaivorOrder": 0
            }
        ],
        "tfdClassRelateds": [
            {
                "addtime": 1499856858000,
                "modtime": 1499857863000,
                "adduser": "admin",
                "moduser": "admin",
                "isenable": -1,
                "clssId": "6b84ba0e9712444e99b62518956712c9",
                "clssClassId": "42123f81b05d4866974a1bc9fdd2f1da",
                "clssFormulaId": "997570beaa784d5c8ca5e60840f88c7b",
                "clssSeq": null,
                "clssClassRelatedName": "测试",
                "clssAliasName": "测试",
                "clssEdmcNameEn": "edm那边没有取到值",
                "clssConditionName": "TestName3",
                "clssConditionFormula": "[1] AND [2] OR [3]",
                "clssConditionDesc": null,
                "acctid": 1
            }
        ],
        "tfdFormula": {
            "addtime": 1499918021000,
            "modtime": 1499918021000,
            "adduser": "MR. Mock",
            "moduser": "MR. Mock",
            "isenable": 1,
            "frmuId": "997570beaa784d5c8ca5e60840f88c7b",
            "frmuFormulaContent": "TEXT(#prop_42123f81b05d4866974a1bc9fdd2f1da_6b3fb4b13cc14b0894f96815fda9d2f5_test.测试_004#) +VALUE(#prop_42123f81b05d4866974a1bc9fdd2f1da_1d3edd7fa4964654a801a3aab71ce769_test.测试_002#)",
            "frmuFormulaStyle": "[{\"type\":\"func\",\"val\":\"TEXT\",\"label\":\"TEXT\",\"returnType\":\"String\"},{\"type\":\"str\",\"val\":\"(\"},{\"type\":\"prop\",\"val\":\"42123f81b05d4866974a1bc9fdd2f1da_6b3fb4b13cc14b0894f96815fda9d2f5_test.测试_004\",\"label\":\"this.父属性\",\"returnType\":\"varchar\"},{\"type\":\"str\",\"val\":\") +\"},{\"type\":\"func\",\"val\":\"VALUE\",\"label\":\"VALUE\",\"returnType\":\"String\"},{\"type\":\"str\",\"val\":\"(\"},{\"type\":\"prop\",\"val\":\"42123f81b05d4866974a1bc9fdd2f1da_1d3edd7fa4964654a801a3aab71ce769_test.测试_002\",\"label\":\"this.计量单位属性\",\"returnType\":\"measurement\"},{\"type\":\"str\",\"val\":\")\"}]",
            "acctid": 0
        }
    }
}
